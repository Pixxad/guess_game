use std::cmp::Ordering;
use std::io;
use rand::Rng;

fn main() {
    println!("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤  –∏–≥—Ä—É 'Guess the number!'");
    let secret_number = rand::rng().random_range(0..=100);
    
    loop {
        println!("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ");
        let mut guess_number = String::new();
        io::stdin()
            .read_line(&mut guess_number)
            .expect("–û–π, –æ–π, –ø–æ—Ö–æ–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞...üò≠üò≠üò≠");
        
        let guess_number: i32 = match guess_number.trim().parse() {
            Ok(num) => num,
            Err(_) => continue,
        };
        
        println!("–í–∞—à–µ —á–∏—Å–ª–æ: {guess_number}");
        
        match guess_number.cmp(&secret_number) {
            Ordering::Less => println!("–û–∂–∏–¥–∞–º–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ!"),
            Ordering::Greater => println!("–û–∂–∏–¥–∞–º–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ!"),
            Ordering::Equal => {
                println!("–í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!");
                break;
            },
        }        
    }

    println!("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏...");
    let mut exit = String::new();
    io::stdin().read_line(&mut exit).unwrap();
}